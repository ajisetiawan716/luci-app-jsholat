<div id="output" style="margin-top: 10px; padding: 10px; border: 1px">
    <% 
    -- Baca isi file last_updated.txt
    local last_updated_file = io.open("/usr/share/jsholat/last_updated.txt", "r")
    if last_updated_file then
        local last_updated = last_updated_file:read("*l")  -- Baca hanya baris pertama
        last_updated_file:close()

        -- Hapus teks "Terakhir diperbarui:" jika ada
        last_updated = last_updated:gsub("Terakhir diperbarui:", ""):gsub("^%s*(.-)%s*$", "%1")
    %>
        <strong>Terakhir diperbarui:</strong> <%= last_updated %>
    <% else %>
        <%:Terakhir diperbarui tidak diketahui...%>
    <% end %>
</div>

<script type="text/javascript">
    // Fungsi untuk mengirim permintaan AJAX dan menangkap output secara real-time
    function updateJadwal() {
        console.log("Fungsi updateJadwal dipanggil!"); // Debugging

        var outputDiv = document.getElementById("output");
        outputDiv.innerHTML = "Memulai pembaruan jadwal...";  // Tampilkan pesan awal

        var url = "<%=luci.dispatcher.build_url('admin/services/jsholat/update')%>";
        console.log("Mengirim permintaan ke:", url); // Debugging

        // Kirim permintaan AJAX
        fetch(url, {
            method: "POST",
            headers: {
                "Content-Type": "application/x-www-form-urlencoded"
            }
        })
        .then(response => {
            if (response.ok) {
                return response.text();  // Ambil output sebagai teks
            } else {
                throw new Error("Terjadi kesalahan: " + response.status);
            }
        })
        .then(data => {
            // Pisahkan output berdasarkan baris baru
            var lines = data.split("\n");
            outputDiv.innerHTML = "";  // Kosongkan output sebelum menampilkan hasil baru

            // Tampilkan setiap baris output satu per satu
            lines.forEach((line, index) => {
                setTimeout(() => {
                    // Jika ini adalah baris terakhir, pertahankan di layar
                    if (index === lines.length - 1) {
                        outputDiv.innerHTML = line;  // Tampilkan baris terakhir
                    } else {
                        outputDiv.innerHTML = line;  // Tampilkan baris saat ini
                    }
                }, index * 2000);  // Jeda 2 detik antara setiap baris
            });
        })
        .catch(error => {
            console.error("Error:", error);
            outputDiv.innerHTML = error.message;  // Tampilkan pesan error
        });
    }

    // Mencegah perilaku default tombol
    document.addEventListener("DOMContentLoaded", function() {
        console.log("DOM telah dimuat!"); // Debugging

        var button = document.querySelector(".cbi-button-apply");
        if (button) {
            console.log("Tombol ditemukan!"); // Debugging
            button.onclick = function(event) {
                console.log("Tombol ditekan!"); // Debugging
                event.preventDefault();  // Mencegah pengiriman form
                updateJadwal();  // Jalankan fungsi updateJadwal
            };
        } else {
            console.error("Tombol tidak ditemukan!"); // Debugging
        }
    });
</script>